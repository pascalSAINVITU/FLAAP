{
/*
Check in explorer: https://testnetexplorer.obyte.org/#EaRzUQun7oaA46f/P2iDXUMErHCJrZHZDYaFyBZ37/Q=
Agent address: 2AX6PP2KWJMDQTVX4WDTPBCEH5BXBDKC
Check in explorer: https://testnetexplorer.obyte.org/#qXkJaSNDLRMwBugOoHyvlcvntErqr7cRJ0qdcTHYgkw=
Agent address: DHG6Y47FRUVAMITGLX5L3SMOSVHO63S4
Check in explorer: https://testnetexplorer.obyte.org/#UUPnhXZXFth1YbBljcPGwoTcSBQbYheolEDiDJ9OMtI=
Agent address: 53ZSJC4WOEZ4AG2S5IYZ55YMVRL6WU35
Check in explorer: https://testnetexplorer.obyte.org/#Y6C7ajZvhFDz3XiJQXWMBkmW9tcjty78m52V7IAMn/c=
Agent address: X2CFULIKVRUY7TSDZ6UJT2PP5VD7IA7T
Success
Check in explorer: https://testnetexplorer.obyte.org/#5neBarfa5sMLkVFBXssA9cSyZN8Th64bVuxVQUizeKY=
Agent address: QTNSFC5JMQ3CLYEYTHJLFD3GF4BAP6TY
Check in explorer: https://testnetexplorer.obyte.org/#Y00MSaX3YaqM8cwPkvAGNVpkc3HN/B478th1u2DE+hg=
Agent address: G2BIMXCGHUL6YNKRTQQZFIYVNLA5BGUJ
Check in explorer: https://testnetexplorer.obyte.org/#Ek7M3jxbJBnw2Rturjmpr1M6vPmznuKr8SN6BCy4DYQ=
Agent address: VB7ZMODYNKN2DQAZQCFSNCF7OCDZECSW
Check in explorer: https://testnetexplorer.obyte.org/#rrfEYgxJVssIQwTGDNV4G9mxXHw3YTp607CRKbFUmWs=
Agent address: YRGXXOB6FKZOQ5BQXG6374HPWAWESAAS
Check in explorer: https://testnetexplorer.obyte.org/#IGtWvpSITNhFWX3jZMdCSkmYiHrzzddrRgEholKZwjg=
Agent address: 5D4R3U3GOQJBVGOFCB4LILU4ZHIKCBMQ
*/
	init: "{
		// admin
			$AA_OWNER = "O7NYCFUL5XIJTYE3O4MKGMGMTN6ATQAJ"; //office_testnet_wallet
			$AA_NAME = "FLAAP";
		// secondary AAs
			$LOPAVAA = "YICOQCAWUSFBIQGBB4HUPQ23U37RA5WG";
			$THAANKS = var[$LOPAVAA]["THAANKS_last_version"]; // getting user help for future trigger
			$DANAA = var[$LOPAVAA]["DANAA_last_version"]; // last version of Dynamic Asset Name AA;
		
		// forever constantes
			$TICKET_PRICE = 10000;
			$ROUND_BUYING_PERIOD = 3*60; // seconds
			$DRAWING_TIME_DELAY = 5*60; // seconds
			$DRAWING_TIME_TOLERANCE = 10*60; // seconds
			$PERCENTAGE_FOR_HELPER = 0.5;  // 0.5 %
			$ATTESTOR = '35IT3ZYKEPQSCXG2F7A7KWNRAD3SZXN4'; // use for not so important random number generation
			$INSTRUCTIONS = "Send "|| $TICKET_PRICE ||" units to buy a ticket. ";
		
		// input variables
			$asset = trigger.output[[asset!=base]].asset != "none" ? trigger.output[[asset!=base]].asset : "base";
			$key = var[$DANAA][$asset||"_ticker"] otherwise $asset;

			$dead_line = var[$key||"_dead_line"] otherwise timestamp + $ROUND_BUYING_PERIOD;
	}",
	messages: {
		cases: [
			{ if: "{ (timestamp < ($dead_line)) and !(var[$key||"_draw_time"]) }",	// running, just buy ticket
				init: "{ 
					if (trigger.output[[asset=$asset]] != $TICKET_PRICE)
						bounce ("Ticket price is "||$TICKET_PRICE||" "||$key);
				}",
				messages: [
					{ 
						app: "state", state: "{
						$nop = $key||"_number_of_players";
						var[$nop] = !!var[$nop] ? var[$nop] + 1 : 1;
						var[$key||"_dead_line"] = $dead_line;
						var[$key||"_player_"||var[$nop]] = trigger.address;
						var[$key||"_balance"] = var[$key||"_balance"] ? 
							var[$key||"_balance"] + trigger.output[[asset=$asset]] : 
							trigger.output[[asset=$asset]];
						
						// if attested address, it plays a role in the seed
						if (attestation[[attestors=$ATTESTOR, address=trigger.address, ifnone=false]])
							var[$key||"_seed"] = sha256(var[$key||"_seed"]||trigger.address);

						response['message'] = "You have enter the lottery ^^"; 
						}"
					}
				]
			},
			{ if: "{ ( (timestamp > $dead_line)) and !(var[$key||"_draw_time"]) }",	// buy last ticket and start the draw
				init: "{ 
					$buy_last_ticket = trigger.output[[asset=$asset]] >= $TICKET_PRICE;
					if ($buy_last_ticket)
						$reimbursement = trigger.output[[asset=$asset]] - $TICKET_PRICE;
					else
						$reimbursement = trigger.output[[asset=$asset]] - 1000;
					// delay before we draw with seed based only on time variable data
					$draw_time = timestamp + $DRAWING_TIME_DELAY;
					// pick a helper from the players, but someone else or a bot will be able to trigger for the reward
					$old_nop = var[$key||"_number_of_players"] otherwise 0;
					$nop = $old_nop+1;
					
					if ($nop>1) // si un seul jouer pas tirage au sort
					{
						$random_number = number_from_seed(var[$key||"_seed"], 1, $old_nop);
						$helper = var[$key||"_player_"||$random_number];
					}
					else
						$helper = var[$key||"_player_1"];
					
					// calcul reward
					$temp = round (var[$key||"_balance"] * $PERCENTAGE_FOR_HELPER / 100);
					$reward = ($temp > 10000) ? $temp : 10000;

					
					if (!!trigger.data.debug)
					{
						bounce ($nop||"  "||$random_number||"  "||$key);
					}
				}",
				messages: [ // sending reward to the one that will trigger at the forced time
					{
						app: "data", payload: {
							helper: "{ $helper }",
							ask_help:  "{ "true" }",
							// private:  "{ false }",
							requested_time: "{ $draw_time }",
							acceptable_delay: "{ $DRAWING_TIME_TOLERANCE }",
						}
					},
					{
						app: "payment",payload: { asset: "{ $asset }",outputs: [
							{  address: "{ $THAANKS }",amount: "{ $reward }" },
							{  address: "{ trigger.address }", amount: "{ $reimbursement }" }
						]	}
					},
					{   
						app: "state", state: "{
						if($buy_last_ticket)
						{
							var[$key||"_number_of_players"] = $nop;
							var[$key||"_player_"||$nop] = trigger.address;
							var[$key||"_balance"] += trigger.output[[asset=$asset]]-1000;
							response['message'] = "You have enter the lottery, and trigger the draw ^^"; 
						}
						else
							response['message'] = "You have trigger the draw ^^ "; 
						
						var[$key||"_balance"] -= $reward;
						var[$key||"_seed"] = $helper; // for next helper draw if necessary
						var[$key||"_draw_time"] = $draw_time;
						}"
					}
				]
			},
			{ if: "{ !!var[$key||"_draw_time"] and var[$key||"_draw_time"] > timestamp }",	// try to draw before draw time
				messages: [ // sending reward to the one that will trigger at the forced time
					{   
						app: "state",  state: "{
						bounce ("Too early draw time is set to "|| var[$key||"_draw_time"]);
						}"
					}
				]
			},
			{ if: "{ !!var[$key||"_draw_time"] and timestamp < var[$key||"_draw_time"] + $DRAWING_TIME_TOLERANCE }",	// time to draw !!
				init: "{ 
					// all time variable fixed in the dag
					$timestamp =  data_feed[[oracles='OPNUXBRSSQQGHKQNEPD2GLWQYEUY5XLD', feed_name='timestamp']];
					$total_cap =  data_feed[[oracles='F4KHJUCLJKY4JV7M5F754LAJX4EB7M4N', feed_name='TOTAL_CAP']];
					$eth_btc_price =  data_feed[[oracles='F4KHJUCLJKY4JV7M5F754LAJX4EB7M4N', feed_name='ETH_BTC']];

					// and the winner is
					$draw_seed = $timestamp||$total_cap||$bitcoin_hash||$eth_btc_price;
					$winner_num = number_from_seed($draw_seed, 1, var[$key||"_number_of_players"]);
					$winner = var["_player_"||$winner_num];
				}",
				messages: [ // pay the guy!
					{
						app: "data", payload: {
						message:  "{ "You won the lottery!" }",
						}
					},
					{
						app: "payment", payload: { asset: "{ $asset }", outputs: [
						{ address: "{ $winner }", amount: "{ var[$key||"_balance"] }" }
						]}
					},
					{   
						app: "state", 
						state: "{
						var[$key||"_draw_time"] = false;    var[$key||"_dead_line"] = timestamp + $ROUND_BUYING_PERIOD;
						var[$key||"_balance"] = false;      var[$key||"_number_of_players"] = false;
						}"
					}
				]
			},
			{ if: "{ !!var[$key||"_draw_time"] and timestamp > var[$key||"_draw_time"] + $DRAWING_TIME_TOLERANCE }",	// too late lets pick a draw time again and hope the next helper will help
			
				init: "{ 
					// delay before we draw with seed based only on time variable data
					$draw_time = timestamp + $DRAWING_TIME_DELAY;
					// pick a helper from the players, but someone else or a bot will be able to trigger for the reward
					$helper = var[$key||"_player_"||number_from_seed(var[$key||"_seed"], 1, var[$key||"_number_of_players"])];
					$temp = round (var[$key||"_balance"] * $PERCENTAGE_FOR_HELPER / 100);
					$reward = ($temp > 10000) ? $temp : 10000;
				}",
				messages: [ // sending reward to the one that will trigger at the forced time
					{
						app: "data", payload: {
							help:  "{ true }",        helper: "{ $helper }",
							time: "{ $draw_time }",   delay: "{ $DRAWING_TIME_TOLERANCE }",
						}
					},
					{
						app: "payment", payload: { asset: "{ $asset }", outputs: [
						{ address: "{ $THAANKS }", amount: "{ $reward }" },
						]}
					},
					{   
						app: "state",  state: "{
						var[$key||"_draw_time"] = $draw_time;
						var[$key||"_balance"] -= $reward;
						var[$key||"_seed"] = $helper;
						
						response['message'] = "AA was not triggered in time, and other random draw time as been piced and a user as been asked for help."; 
						}"
					}
				]
			},
			{	// default case bounce instruction
				messages: [ { app: "state",  state: "{ bounce ($INSTRUCTIONS ||$key);}"} ]
			}
		]
	}
}
